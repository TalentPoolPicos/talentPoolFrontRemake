/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Hello world */
    get: operations['AppController_getHello'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/minio/{uuid}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get file by UUID
     * @description Get file by UUID
     */
    get: operations['MinioController_getFile'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get users by pages */
    get: operations['UsersController_findByPage'];
    put?: never;
    post?: never;
    /** Delete a user */
    delete: operations['UsersController_delete'];
    options?: never;
    head?: never;
    /**
     * Update a user partially
     * @description Update some user data partially. At least one field must be sent.
     */
    patch: operations['UsersController_partialUpdate'];
    trace?: never;
  };
  '/api/v1/users/{uuid}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a user by uuid */
    get: operations['UsersController_findOne'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/users/profile-picture': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Upload a new profile picture
     * @description A image file is required
     */
    patch: operations['UsersController_uploadProfilePicture'];
    trace?: never;
  };
  '/api/v1/users/banner-picture': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Upload a new banner picture
     * @description A image file is required
     */
    patch: operations['UsersController_uploadBannerPicture'];
    trace?: never;
  };
  '/api/v1/auth/student/sign-in': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Sign in as a student
     * @description Sign a new user as student.
     */
    post: operations['AuthController_signInWithStudent'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/auth/student/sign-up': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Sign up as a student
     * @description Create and sign up a new user as student.
     */
    post: operations['AuthController_signUpWithStudent'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/auth/enterprise/sign-in': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Sign in as a enterprise
     * @description Sign a new user as enterprise.
     */
    post: operations['AuthController_signInWithEnterprise'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/auth/enterprise/sign-up': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Sign up as a enterprise
     * @description Create and sign up a new user as enterprise.
     */
    post: operations['AuthController_signUpWithEnterprise'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/auth/refresh': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Refresh the access token */
    post: operations['AuthController_refresh'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/enterprises': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get enterprises by pages */
    get: operations['EnterpriseController_findByPage'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update a enterprise partially
     * @description Update some enterprise data partially. At least one field must be sent.
     */
    patch: operations['EnterpriseController_partialUpdate'];
    trace?: never;
  };
  '/api/v1/enterprises/{uuid}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get an enterprise by uuid */
    get: operations['EnterpriseController_findOne'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/students': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get students by pages */
    get: operations['StudentsController_findByPage'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update a student partially
     * @description Update some student data partially. At least one field must be sent.
     */
    patch: operations['StudentsController_patialUpdate'];
    trace?: never;
  };
  '/api/v1/students/{uuid}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a student by uuid */
    get: operations['StudentsController_findOne'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/students/curriculum': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Upload a new curriculum
     * @description A pdf file is required
     */
    patch: operations['StudentsController_uploadCurriculum'];
    trace?: never;
  };
  '/api/v1/students/history': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Upload a new history
     * @description A pdf file is required
     */
    patch: operations['StudentsController_uploadHistory'];
    trace?: never;
  };
  '/api/v1/socialmedia/{userUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all social media by user */
    get: operations['SocialmediaController_findAllByUserUuid'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/socialmedia': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create or update a social media */
    post: operations['SocialmediaController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/socialmedia/{uuid}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete a social media */
    delete: operations['SocialmediaController_delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/tag/{userUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all tags by user */
    get: operations['TagsController_findAllByUserUuid'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/tag': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create or update a tag */
    post: operations['TagsController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/tag/{uuid}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete a tag */
    delete: operations['TagsController_delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/search/{query}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Search users */
    get: operations['SearchController_search'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    StudentDto: {
      /** @description The uuid of the student */
      uuid: string;
      /** @description The status of the student */
      isCompleted: boolean;
      /** @description The name of the student */
      name?: string;
      /** @description The email of the student */
      email?: string;
      /** @description The registration number of the student */
      registrationNumber?: string;
      /** @description The description of the student */
      description?: string;
      /**
       * Format: date-time
       * @description The date the student was created
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description The date the student was last updated
       */
      updatedAt: string;
      /**
       * Format: date-time
       * @description The date of birth of the student
       */
      birthdate?: string;
      /** @description The url of the curriculum */
      curriculum?: string;
      /** @description The url of the history */
      history?: string;
      /** @description The url of the lattes */
      lattes?: string;
    };
    EnterpriseDto: {
      /** @description The uuid of the enterprise */
      uuid: string;
      /**
       * Format: date-time
       * @description The date the enterprise was created
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description The date the enterprise was last updated
       */
      updatedAt: string;
      /** @description The status of the enterprise */
      isCompleted: boolean;
      /** @description The name of the enterprise */
      name?: string;
      /** @description The email of the enterprise */
      email?: string;
      /** @description The description of the enterprise */
      description?: string;
      /** @description The CNPJ of the enterprise */
      cnpj?: string;
      /** @description The social reason of the enterprise */
      socialReason?: string;
      /** @description The fantasy name of the enterprise */
      fantasyName?: string;
    };
    UserDto: {
      /** @description The uuid of the user */
      uuid: string;
      /**
       * Format: date-time
       * @description The date the user was created
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description The date the user was last updated
       */
      updatedAt: string;
      /**
       * @description The username of the user
       * @example john
       */
      username: string;
      email: string;
      /**
       * @description The role of the user
       * @enum {string}
       */
      role: 'admin' | 'moderator' | 'student' | 'enterprise' | 'teacher';
      /** @description The profile picture of the user */
      profilePicture?: string;
      /** @description The banner picture of the user */
      bannerPicture?: string;
      /** @description The social media of the user */
      socialMedia: string[];
      /** @description The tags of the user */
      tags: string[];
      /** @description The student of the user */
      student?: components['schemas']['StudentDto'];
      /** @description The enterprise of the user */
      enterprise?: components['schemas']['EnterpriseDto'];
    };
    UsersPageDto: {
      /** @description The list of users */
      users: components['schemas']['UserDto'];
      /** @description The total number of users */
      total: number;
    };
    PartialUserDto: {
      /**
       * @description The username of the user
       * @example john
       */
      username?: string;
      /**
       * @description The email of the user
       * @example john@john.com
       */
      email?: string;
      /**
       * @description The password of the user (must be strong)
       * @example StrongP@ssword1!
       */
      password?: string;
    };
    SignInDto: {
      /**
       * @description The username of the user
       * @example john
       */
      username: string;
      /**
       * @description The password of the user (must be strong)
       * @example StrongP@ssword1!
       */
      password: string;
    };
    AccessTokenDto: {
      /** @description The access token of the user */
      access_token: string;
      /** @description The refresh token of the user */
      refresh_token: string;
      /** @description The access token expiration time in seconds */
      access_token_expires_in: number;
      /** @description The refresh token expiration time in seconds */
      refresh_token_expires_in: number;
      /** @description The user information */
      user: components['schemas']['UserDto'];
    };
    SignUpDto: {
      /**
       * @description The username of the user
       * @example john
       */
      username: string;
      /**
       * @description The email of the user
       * @example john@email.com
       */
      email: string;
      /**
       * @description The password of the user (must be strong)
       * @example StrongP@ssword1!
       */
      password: string;
    };
    RefreshTokenDto: {
      /** @description The refresh token of the user */
      refreshToken: string;
    };
    EnterprisePageDto: {
      /** @description The list of enterprises */
      enterprises: components['schemas']['EnterpriseDto'];
      /** @description The total number of enterprises */
      total: number;
    };
    PartialEnterpriseDto: {
      /** @description The name of the enterprise */
      name?: string;
      /** @description The email of the enterprise */
      email?: string;
      /** @description The description of the enterprise */
      description?: string;
      /** @description The CNPJ of the enterprise */
      cnpj?: string;
      /** @description The social reason of the enterprise */
      socialReason?: string;
      /** @description The fantasy name of the enterprise */
      fantasyName?: string;
    };
    StudentsPageDto: {
      /** @description The list of students */
      students: components['schemas']['StudentDto'];
      /** @description The total number of students */
      total: number;
    };
    PartialStudentDto: {
      /**
       * @description The student name
       * @example john
       */
      name?: string;
      /**
       * Format: date-time
       * @description The student birth date
       */
      birthDate?: string;
      /** @description The student lattes */
      lattes?: string;
      /** @description The student email */
      email?: string;
      registrationNumber?: string;
      /** @description The student description */
      description?: string;
    };
    SocialMediaDto: {
      /** @description The uuid of the social media */
      uuid: string;
      /**
       * @description The type of social media
       * @example instagram
       * @enum {string}
       */
      type:
      | 'x'
      | 'facebook'
      | 'instagram'
      | 'linkedin'
      | 'youtube'
      | 'tiktok'
      | 'github'
      | 'gitlab'
      | 'reddit'
      | 'telegram'
      | 'whatsapp'
      | 'discord';
      /**
       * @description The URL of the social media
       * @example https://instagram.com/john
       */
      url: string;
      /**
       * Format: date-time
       * @description The date the social media was created
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description The date the social media was last updated
       */
      updatedAt: string;
    };
    CreateSocialMediaDto: {
      /**
       * @description The type of social media
       * @example instagram
       * @enum {string}
       */
      type:
      | 'x'
      | 'facebook'
      | 'instagram'
      | 'linkedin'
      | 'youtube'
      | 'tiktok'
      | 'github'
      | 'gitlab'
      | 'reddit'
      | 'telegram'
      | 'whatsapp'
      | 'discord';
      /**
       * @description The URL of the social media
       * @example https://instagram.com/john
       */
      url: string;
    };
    TagDto: {
      /** @description The uuid of the social media */
      uuid: string;
      /**
       * Format: date-time
       * @description The date the social media was created
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description The date the social media was last updated
       */
      updatedAt: string;
      /**
       * @description The label of the tag
       * @example nodejs
       */
      label: string;
    };
    CreateTagDto: {
      /**
       * @description The label of the tag
       * @example nodejs
       * @enum {string}
       */
      label:
      | 'x'
      | 'facebook'
      | 'instagram'
      | 'linkedin'
      | 'youtube'
      | 'tiktok'
      | 'github'
      | 'gitlab'
      | 'reddit'
      | 'telegram'
      | 'whatsapp'
      | 'discord';
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  AppController_getHello: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Hello world */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  MinioController_getFile: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_findByPage: {
    parameters: {
      query?: {
        /** @description The page number */
        page?: number;
        /** @description The number of items per page. Default is 10. Max is 20 and min is 1 */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The list of users and the total number of users */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UsersPageDto'];
        };
      };
    };
  };
  UsersController_delete: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The user was successfully deleted */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_partialUpdate: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PartialUserDto'];
      };
    };
    responses: {
      /** @description The user was successfully updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserDto'];
        };
      };
      /** @description The model state is invalid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description The username or email is already in use */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The user */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserDto'];
        };
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_uploadProfilePicture: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      /** @description The profile picture was successfully updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserDto'];
        };
      };
      /** @description Only image files are allowed */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_uploadBannerPicture: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      /** @description The banner picture was successfully updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserDto'];
        };
      };
      /** @description Only image files are allowed */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_signInWithStudent: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SignInDto'];
      };
    };
    responses: {
      /** @description The student has successfully signed in */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AccessTokenDto'];
        };
      };
      /** @description The student could not be authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description The student could not be found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_signUpWithStudent: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SignUpDto'];
      };
    };
    responses: {
      /** @description The student has successfully signed up */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AccessTokenDto'];
        };
      };
      /** @description The student could not be authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description The student could not be found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description "The student already exists" or "The email is already in use" or "role is not valid" */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description The model state is invalid */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_signInWithEnterprise: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SignInDto'];
      };
    };
    responses: {
      /** @description The enterprise has successfully signed in */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AccessTokenDto'];
        };
      };
      /** @description The enterprise could not be authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description The enterprise could not be found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_signUpWithEnterprise: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SignUpDto'];
      };
    };
    responses: {
      /** @description The enterprise has successfully signed up */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AccessTokenDto'];
        };
      };
      /** @description The enterprise could not be authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description The enterprise could not be found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description "The enterprise already exists" or "The email is already in use" or "role is not valid" */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description The model state is invalid */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_refresh: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RefreshTokenDto'];
      };
    };
    responses: {
      /** @description The access token has been successfully refreshed */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AccessTokenDto'];
        };
      };
      /** @description The refresh token is invalid */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description The user could not be found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  EnterpriseController_findByPage: {
    parameters: {
      query?: {
        /** @description The page number */
        page?: number;
        /** @description The number of enterprises per page */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The list of enterprises and the total number of enterprises */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['EnterprisePageDto'];
        };
      };
    };
  };
  EnterpriseController_partialUpdate: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PartialEnterpriseDto'];
      };
    };
    responses: {
      /** @description The enterprise was updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['EnterprisePageDto'];
        };
      };
      /** @description The enterprise was not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  EnterpriseController_findOne: {
    parameters: {
      query: {
        uuid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The enterprise */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['EnterprisePageDto'];
        };
      };
      /** @description Enterprise not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  StudentsController_findByPage: {
    parameters: {
      query?: {
        /** @description The page number */
        page?: number;
        /** @description The number of students per page */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The list of students and the total number of students */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['StudentsPageDto'];
        };
      };
    };
  };
  StudentsController_patialUpdate: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PartialStudentDto'];
      };
    };
    responses: {
      /** @description The student was successfully updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['StudentDto'];
        };
      };
      /** @description The model state is invalid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Student not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  StudentsController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The student */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['StudentDto'];
        };
      };
      /** @description Student not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  StudentsController_uploadCurriculum: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      /** @description The curriculum was successfully updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['StudentDto'];
        };
      };
      /** @description Only pdf files are allowed */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  StudentsController_uploadHistory: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      /** @description The history was successfully updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['StudentDto'];
        };
      };
      /** @description Only pdf files are allowed */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SocialmediaController_findAllByUserUuid: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        userUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The list of social media by user */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SocialMediaDto'][];
        };
      };
    };
  };
  SocialmediaController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSocialMediaDto'];
      };
    };
    responses: {
      /** @description The social media has been successfully created */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SocialMediaDto'];
        };
      };
      /** @description The data provided is invalid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SocialmediaController_delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The social media has been successfully deleted */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SocialMediaDto'];
        };
      };
      /** @description The social media could not be found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TagsController_findAllByUserUuid: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        userUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The list of tags by user */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TagDto'][];
        };
      };
    };
  };
  TagsController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateTagDto'];
      };
    };
    responses: {
      /** @description The tag has been successfully created */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TagDto'];
        };
      };
      /** @description The data provided is invalid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  TagsController_delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The tag has been successfully deleted */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TagDto'];
        };
      };
      /** @description The data provided is invalid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SearchController_search: {
    parameters: {
      query?: {
        /** @description The page number */
        page?: number;
        /** @description The number of items per page. Default is 10. Max is 20 and min is 1 */
        limit?: number;
      };
      header?: never;
      path: {
        query: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The list of users */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserDto'][];
        };
      };
    };
  };
}
